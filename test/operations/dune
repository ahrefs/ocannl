(copy_files
 (files ../config/ocannl_config))

(executable
 (name micrograd_demo_logging)
 (package neural_nets_lib)
 (public_name neural_nets_lib.micrograd_demo_logging)
 (modules micrograd_demo_logging)
 (libraries ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(subdir
 config
 (rule
  (target ocannl_backend.txt)
  (package neural_nets_lib)
  (deps
   ocannl_config
   (env_var OCANNL_BACKEND))
  (action
   (run %{dep:ocannl_read_config.exe} "--read=backend")))
 (rule
  (target ocannl_backend_extension.txt)
  (package neural_nets_lib)
  (deps
   ocannl_config
   (env_var OCANNL_BACKEND))
  (action
   (run %{dep:ocannl_read_config.exe} "--read=backend_extension"))))

; Solution: Create intermediate targets that guarantee file generation
; Step 1: Run the test and create a backend-specific sentinel file when done

(rule
 (targets micrograd_demo-logs.done)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (action
  (progn
   (run
    %{dep:micrograd_demo_logging.exe}
    "--ocannl_debug_backend=text"
    "--ocannl_log_file_stem=micrograd_demo_logging"
    "--ocannl_log_main_domain_to_stdout=false"
    "--ocannl_debug_log_to_stream_files=true"
    ; We have to clean up to avoid appending to results of a previous run
    "--ocannl_clean_up_log_files_on_startup=true")
   (write-file %{targets} "completed\n"))))

; Step 2: Process the log file, depending on the backend-specific sentinel

(rule
 (deps micrograd_demo-logs.done)
 (target "backend-0-0.log.actual")
 (package neural_nets_lib)
 (action
  (progn
   (run
    %{dep:../../tools/minised.exe}
    " = 0x[0-9a-fA-F]+"
    " = 0xNNNN"
    "log_files/%{read:config/ocannl_backend.txt}-0-0.log"
    "%{target}")
   (run
    %{dep:../../tools/minised.exe}
    " = 00[0-9a-fA-F]+"
    " = 0xNNNN"
    "%{target}"
    "%{target}")
   (run
    %{dep:../../tools/minised.exe}
    "\\([a-z0-9_]+\\)\\[0\\]{=[-.e0-9]+} = "
    "\\1[0]{=MAYBE UNINITIALIZED} = "
    "%{target}"
    "%{target}"))))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (action
  (diff
   "micrograd_demo_logging-%{read:config/ocannl_backend.txt}-0-0.log.expected"
   "backend-0-0.log.actual")))

(test
 (name threefry4x32_demo)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules threefry4x32_demo)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_param_shape_error)
 (package neural_nets_lib)
 (modules test_param_shape_error)
 (libraries base ocannl stdio)
 (preprocess
  (pps ppx_here ppx_ocannl ppx_expect)))

(test
 (name top_down_prec)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules top_down_prec)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

; Generate both ll files and actual files in one rule using no-infer

(rule
 (target n3_fwd_with_prec-unoptimized.ll.actual)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (action
  (no-infer
   (progn
    (run
     %{dep:threefry4x32_demo.exe}
     "--ocannl_output_prec_in_ll_files=true"
     "--ocannl_output_debug_files_in_build_directory=true")
    (copy build_files/n3_fwd-unoptimized.ll %{target})))))

(rule
 (targets top_down_prec-unoptimized.ll.actual top_down_prec.extension.actual)
 (package neural_nets_lib)
 (deps
  config/ocannl_backend_extension.txt
  ocannl_config
  (env_var OCANNL_BACKEND))
 (action
  (no-infer
   (progn
    (run
     %{dep:top_down_prec.exe}
     "--ocannl_output_prec_in_ll_files=true"
     "--ocannl_output_debug_files_in_build_directory=true")
    (copy
     build_files/d_fwd-unoptimized.ll
     top_down_prec-unoptimized.ll.actual)
    (copy
     build_files/d_fwd.%{read:config/ocannl_backend_extension.txt}
     top_down_prec.extension.actual)))))

(rule
 (targets
  test_where_precision-unoptimized.ll.actual
  test_where_precision.extension.actual)
 (package neural_nets_lib)
 (deps
  config/ocannl_backend_extension.txt
  ocannl_config
  (env_var OCANNL_BACKEND))
 (action
  (no-infer
   (progn
    (run
     %{dep:test_where_precision.exe}
     "--ocannl_output_prec_in_ll_files=true"
     "--ocannl_output_debug_files_in_build_directory=true")
    (copy
     build_files/where_fwd-unoptimized.ll
     test_where_precision-unoptimized.ll.actual)
    (copy
     build_files/where_fwd.%{read:config/ocannl_backend_extension.txt}
     test_where_precision.extension.actual)))))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (action
  (diff
   "n3_fwd_with_prec-unoptimized.ll.expected"
   "n3_fwd_with_prec-unoptimized.ll.actual")))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (action
  (diff
   "top_down_prec-unoptimized.ll.expected"
   "top_down_prec-unoptimized.ll.actual")))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (deps
  config/ocannl_backend_extension.txt
  (env_var OCANNL_BACKEND))
 (action
  (diff
   "top_down_prec.%{read:config/ocannl_backend_extension.txt}.expected"
   "top_down_prec.extension.actual")))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (action
  (diff
   "test_where_precision-unoptimized.ll.expected"
   "test_where_precision-unoptimized.ll.actual")))

(rule
 (alias runtest)
 (package neural_nets_lib)
 (deps
  config/ocannl_backend_extension.txt
  (env_var OCANNL_BACKEND))
 (action
  (diff
   "test_where_precision.%{read:config/ocannl_backend_extension.txt}.expected"
   "test_where_precision.extension.actual")))

(test
 (name test_vec_simple)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_vec_simple)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_uniform_demo)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_uniform_demo)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_index_prec)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_index_prec)
 (libraries base arrayjit.ir arrayjit.utils stdio)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_threefry_precision)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_threefry_precision)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_where_simple)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_where_simple)
 (libraries ocannl base stdio)
 (preprocess
  (pps ppx_here ppx_ocannl))
 (modes exe))

(test
 (name test_where_precision)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_where_precision)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_uniform1)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_uniform1)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_random_histograms)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_random_histograms)
 (libraries base ocannl stdio)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name test_record_syntax)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_record_syntax)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl)))

(test
 (name transformer_test)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules transformer_test)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl ppx_sexp_conv)))

(test
 (name attention_test)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules attention_test)
 (libraries base ocannl)
 (preprocess
  (pps ppx_here ppx_ocannl ppx_sexp_conv)))

(test
 (name test_extend_dsls)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules test_extend_dsls)
 (libraries base ocannl stdio)
 (preprocess
  (pps ppx_here ppx_ocannl ppx_expect)))

(test
 (name hello_world_dim1x1)
 (package neural_nets_lib)
 (deps
  ocannl_config
  (env_var OCANNL_BACKEND))
 (modules hello_world_dim1x1)
 (libraries base ocannl stdio)
 (preprocess
  (pps ppx_here ppx_ocannl ppx_expect)))

(library
 (name operations_tutorials)
 (package neural_nets_lib)
 (inline_tests
  (deps
   ocannl_config
   (env_var OCANNL_BACKEND)))
 (libraries base dynlink ocannl stdio)
 (modules hello_world_op zero2hero_1of7 primitive_ops test_threefry4x32)
 (preprocess
  (pps ppx_here ppx_expect ppx_inline_test ppx_ocannl))
 (modes best))
